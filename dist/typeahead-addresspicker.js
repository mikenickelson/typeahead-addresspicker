// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function($) {
    this.AddressPickerResult = (function() {
      function AddressPickerResult(placeResult) {
        this.placeResult = placeResult;
        this.latitude = this.placeResult.geometry.location.lat();
        this.longitude = this.placeResult.geometry.location.lng();
      }

      AddressPickerResult.prototype.addressTypes = function() {
        var component, type, types, _i, _j, _len, _len1, _ref, _ref1;
        types = [];
        _ref = this.addressComponents();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          component = _ref[_i];
          _ref1 = component.types;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            type = _ref1[_j];
            if (types.indexOf(type) === -1) {
              types.push(type);
            }
          }
        }
        return types;
      };

      AddressPickerResult.prototype.addressComponents = function() {
        return this.placeResult.address_components || [];
      };

      AddressPickerResult.prototype.address = function() {
        return this.placeResult.formatted_address;
      };

      AddressPickerResult.prototype.nameForType = function(type, shortName) {
        var component, _i, _len, _ref;
        if (shortName == null) {
          shortName = false;
        }
        _ref = this.addressComponents();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          component = _ref[_i];
          if (component.types.indexOf(type) !== -1) {
            return (shortName ? component.short_name : component.long_name);
          }
        }
        return null;
      };

      AddressPickerResult.prototype.lat = function() {
        return this.latitude;
      };

      AddressPickerResult.prototype.lng = function() {
        return this.longitude;
      };

      AddressPickerResult.prototype.setLatLng = function(latitude, longitude) {
        this.latitude = latitude;
        this.longitude = longitude;
      };

      return AddressPickerResult;

    })();
    return this.AddressPicker = (function(_super) {
      __extends(AddressPicker, _super);

      function AddressPicker(options) {
        if (options == null) {
          options = {};
        }
        this.updateMap = __bind(this.updateMap, this);
        this.options = $.extend({
          local: [],
          datumTokenizer: function(d) {
            return Bloodhound.tokenizers.whitespace(d.num);
          },
          queryTokenizer: Bloodhound.tokenizers.whitespace,
          autocompleteService: {
            types: ["geocode"]
          },
          zoomForLocation: 16,
          reverseGeocoding: false
        }, options);
        AddressPicker.__super__.constructor.call(this, this.options);
        this.lastResult = null;
        this.placeService = new google.maps.places.PlacesService(document.createElement('div'));
        this.initService();
      }

      AddressPicker.prototype.bindDefaultTypeaheadEvent = function(typeahead) {
        typeahead.bind("typeahead:selected", this.updateMap);
        return typeahead.bind("typeahead:cursorchanged", this.updateMap);
      };

      AddressPicker.prototype.unbindDefaultTypeaheadEvent = function(typeahead) {
        typeahead.unbind("typeahead:selected");
        return typeahead.unbind("typeahead:cursorchanged");
      };

      AddressPicker.prototype.updateMap = function(event, place) {
        var _this = this;
        return this.placeService.getDetails(place, function(response) {
          _this.lastResult = new AddressPickerResult(response);
          return $(_this).trigger('addresspicker:selected', _this.lastResult);
        });
      };

      AddressPicker.prototype.initService = function() {
        var api_key, options, p1, p2, self;
        self = this;
        api_key = "AIzaSyBxTGJ1LRgLbe1KLGGitC0EDVlbkYJIBuQ";
        p1 = new google.maps.LatLng(37, 120);
        p2 = new google.maps.LatLng(40, 74);
        options = {
          types: ['geocode'],
          bounds: new google.maps.LatLngBounds(p1, p2),
          componentRestrictions: {
            country: 'us'
          }
        };
        this.service = new google.maps.places.AutocompleteService(this, options);
      };

      AddressPicker.prototype.get = function(query, cb) {
        var filteredPredictions,
          _this = this;
        filteredPredictions = [];
        this.options.autocompleteService.input = query;
        this.service.getPlacePredictions(this.options.autocompleteService, function(predictions) {
          var prediction, self, _i, _len;
          self = _this;
          for (_i = 0, _len = predictions.length; _i < _len; _i++) {
            prediction = predictions[_i];
            if (/\b(United States|BC, Canada)\b/.test(prediction.description)) {
              prediction.description = prediction.description.replace(/, \b(United States|BC, Canada)\b/i, '');
              filteredPredictions.push(prediction);
              console.log(prediction.description);
            }
          }
          cb(filteredPredictions);
          return $(self).trigger('addresspicker:predictions', [filteredPredictions]);
        });
      };

      return AddressPicker;

    })(Bloodhound);
  })(jQuery);

}).call(this);
